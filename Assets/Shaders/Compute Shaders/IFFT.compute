// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PrecomputeTwiddleFactorsAndInputIndices
#pragma kernel HorizontalStepIFFT
#pragma kernel VerticalStepIFFT
#pragma kernel Permute

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

static const float PI = 3.14159265;


RWTexture2D<float4> _TwiddleFactorsAndInputIndicesTexture;
uint _NbCascades;
RWTexture2DArray<float2> _InputTextures;
RWTexture2DArray<float2> _PingPongTextures;
uint _TextureSize;
bool _PingPong;
uint _Step;


float2 ComplexMult(float2 a, float2 b){
	return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float2 ComplexExp(float2 a){
	return float2(cos(a.y), sin(a.y)) * exp(a.x);
}

// This is also called the "Butterfly Texture"
// It contains the twiddle factors and input indices to perform the "butterfly operations" of the Cooley-Tukey algorithm
// https://en.wikipedia.org/wiki/Butterfly_diagram
// https://www.tutorialspoint.com/digital_signal_processing/dsp_discrete_time_frequency_transform.htm
// https://github.com/gasgiant/FFT-Ocean/blob/main/Assets/ComputeShaders/FastFourierTransform.compute
[numthreads(1, 8, 1)]
void PrecomputeTwiddleFactorsAndInputIndices(uint3 id : SV_DispatchThreadID) {
	uint b = _TextureSize >> (id.x + 1);
	float2 mult = 2 * PI * float2(0, 1) / _TextureSize;
	uint i = (2 * b * (id.y / b) + id.y % b) % _TextureSize;
	float2 twiddle = ComplexExp(-mult * ((id.y / b) * b));
	_TwiddleFactorsAndInputIndicesTexture[id.xy] = float4(twiddle.x, twiddle.y, i, i + b);
	_TwiddleFactorsAndInputIndicesTexture[uint2(id.x, id.y + _TextureSize / 2)] = float4(-twiddle.x, -twiddle.y, i, i + b);
}

[numthreads(8, 8, 1)]
void HorizontalStepIFFT(uint3 id : SV_DispatchThreadID){
	float4 data = _TwiddleFactorsAndInputIndicesTexture[uint2(_Step, id.x)];
	uint2 inputsIndices = (uint2)data.ba;
	for (uint i = 0; i < _NbCascades; ++i) {
		if (!_PingPong) _PingPongTextures[uint3(id.xy, i)] = _InputTextures[uint3(inputsIndices.x, id.y, i)] + ComplexMult(float2(data.r, -data.g), _InputTextures[uint3(inputsIndices.y, id.y, i)]);
		else _InputTextures[uint3(id.xy, i)] = _PingPongTextures[uint3(inputsIndices.x, id.y, i)] + ComplexMult(float2(data.r, -data.g), _PingPongTextures[uint3(inputsIndices.y, id.y, i)]);
	}
}

[numthreads(8, 8, 1)]
void VerticalStepIFFT(uint3 id : SV_DispatchThreadID){
	float4 data = _TwiddleFactorsAndInputIndicesTexture[uint2(_Step, id.y)];
	uint2 inputsIndices = (uint2)data.ba;
	for (uint i = 0; i < _NbCascades; ++i) {
		if (!_PingPong) _PingPongTextures[uint3(id.xy, i)] = _InputTextures[uint3(id.x, inputsIndices.x, i)] + ComplexMult(float2(data.r, -data.g), _InputTextures[uint3(id.x, inputsIndices.y, i)]);
		else _InputTextures[uint3(id.xy, i)] = _PingPongTextures[uint3(id.x, inputsIndices.x, i)] + ComplexMult(float2(data.r, -data.g), _PingPongTextures[uint3(id.x, inputsIndices.y, i)]);
	}
}

// The values of every pixel get multiplied by 1 or -1 depending on their position in the texture
[numthreads(8, 8, 1)]
void Permute(uint3 id : SV_DispatchThreadID){
	for (uint i = 0; i < _NbCascades; ++i) {
		_InputTextures[uint3(id.xy, i)] = _InputTextures[uint3(id.xy, i)] * (1.0 - 2.0 * ((id.x + id.y) % 2));
	}
}